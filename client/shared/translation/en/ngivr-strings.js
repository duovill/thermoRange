'use strict';
(() => {
    const isModule = typeof(module) !== 'undefined' && typeof(module.exports) !== 'undefined' && typeof(window) === 'undefined';
    const isWindow = typeof(window) !== 'undefined';

    let ngivrStrings = {
        disableMultipleClicks: (options) => {
            return `The system doesn't allow to click too often. Wait ${options.ms / 1000} seconds.`
        },
        overlay: {
            lock: 'Lock'
        },
        lockStatus: {
            alreadyLocked: 'This document is already locked.',
            couldNotUnlock: 'We could not unlock this document, please try again later.',
        },
        language: {
            en: 'Angol',
            hu: 'Magyar',
        },
        moment: {
            date: 'YYYY.MM.DD.',
            dateTime: 'YYYY.MM.DD. HH:mm:ss',
        },
        form: {
            error: {
                'default': 'Kérem nézze meg a formot, valami hiba van ...',
                save: 'Hiba mentés.'
            },
            validation: {
                required: 'Kötelező',
                kebabCase: 'A formátum csak a-z, _ és 0-9 lehet',
                mask: {
                    invalid: 'Invalid format',
                    regNumber: '7 számjegy',
                    vat: '11 számjegy',
                    taj: '9 számjegy',
                    reg: '10 számjegy',
                    short: 'Teljes dátum szükséges',
                    tcn: '15 karakter',
                    vatId: '10 számjegy',
                    producerId: '7 numbers',
                },
                validDate: 'Helytelen dátum',
                validTaj: 'Hibás TAJ-szám',
                wrongNumber: 'Helytelen érték',
                notUnique: 'Az adat nem egyedi!',
                needData: 'Egyéb adat szükséges',
                max: 'Maximális érték: ',
                min: 'Minimális érték: ',
                ibanLength: 'AZ IBAN-szám maximum 34 karakterből állhat',
                accountLength: 'A magyar bankszámlaszám 16 vagy 24 karakterből állhat',
                range: 'Range: ',
                invalidAccount: 'Account number not valid',
                uniqueVatNumber: 'VatNumber not unique',
                uniqueVatId: 'Vat Id not unique',
                futureDate: 'Future date',
                dateBeforeLoadDate: 'Unload date must be after load date',
                passwordNotSame: 'Differ from password',
                emailNotValid: 'Not valid email',
                maxCharacters: 'Too many characters, maximum: ',

            }
        },
        field: {
            createdAt: 'Létrehozás',
            updatedAt: 'Módosítás',
            partner: 'Partner',
            countryCode: 'Országkód',
            plateNumber1: 'Vontató rsz.',
            plateNumber2: 'Vontatmány rsz.',
            vehicleCountry: 'Fj.',
            loadDate: 'Felrak. ideje',
            arrivalDate: 'Lerak. ideje',
            arrivalDateLong: 'Date of unloading',
            weightToTransfer: 'Tömeg',
            weightPerVehicle: 'Tonna/Jármű',
            carrier: 'Szállítmányozó',
            status: 'Státusz',
            buyer: 'Vevő',
            product: 'Cikk',
            site: 'Telephely',
            productGroup: 'Terménycsoport',
            term: 'Határidő',
            fobDestination: 'FOB-viszonylat',
            quayBerth: 'Hajóállás',
            bruttoWeight: 'Brutto weight (kg)',
            taraWeight: 'Tara weight (kg)',
            wayBill: 'Waybill',
            loadedWeight: 'Loaded Weight (mt)',
            ekaer: 'EKAER',
            overTransportReason: 'Reason of overtransport',
            ship: 'Ship',
            berth: 'Quay berth',
            partnerGroup: 'Partner group',
            officialName: 'Official name',
            shortName: 'Short name (maximum 40 characters)',
            registrationNumber: 'Registration number',
            vatType: 'Type of tax number',
            vatHU: 'Tax number',
            vatOther: 'Tax number',
            currency: 'Currency',
            address: 'Address',
            city: 'City',
            zipCode: 'Zip Code',
            zipCodeHu: 'Zip Code',
            country: 'Country',
            bankAccountNumber: 'Bank Account number',
            producerId: 'Producer identity number',
            vatId: 'Tax identity number',
            taj: 'TAJ number',
            mvhReg: 'MVH Registration number',
            gender: 'Gender',
            birthName: 'Name of birth',
            birthPlace: 'Place of birth',
            birthDate: 'Date of birth',
            motherName: "Mother's name",
            email: 'E-mail address',
            toNotifyName: 'Értesítendő neve',
            toNotifyType: 'Értesítendő típusa',
            amountUnits: 'Unit',
            itemGroup: 'Item group',
            itemNature: 'Item nature',
            itemNumber: 'Item number',
            itemType: 'Item type',
            ledgerClassification: 'Főkönyvi cikkcsoport',
            productName: 'Name of product',
            storageFeeNature: 'Tárolási díj megállapításához termék cikk jellege',
            szj: 'Szolgáltatási jegyzékszám',
            vatPercent: 'VAT percent',
            vatDirection: 'VAT direction',
            vtsz: 'Customs tariff number',
            canBeBoni: 'Bonifikációs lehet-e a cikk?',
            canBeOption: 'Opciós lehet-e a cikk?',
            isRisky: 'Is product risky?',
            productGroupName: 'Product group',
            accountName: 'Name',
            accountCurrency: 'Currency',
            sustainability: 'Sustainability',
            parity: 'Parity',
            contractNumber: 'Contract number',
            partnerContractNumber: 'Partner contract number',
            contractPrice: 'Unit price',
            partnerVatNumber: 'Partner tax number',
            fulfillmentDate: 'Date of fulfillment',
            deadLineDate: 'Date of deadline',
            paymentDate: 'Date of payment',
            payMode: 'Pay mode',
            sygnusAccount: 'Own bank account number',
            ledgerHelper: 'NG IVR Ledger helper',
            discountValue: 'Discount value',
            ledgerOrderNumber: 'Number of order',
            sourceServiceContract: 'Source Service Contract',
            actualServiceContract: 'Actual Service Contract',
            serviceContract: 'Service Contract',
            connectedBoniProduct: 'Connected Bonification Product',
            compensationToValue: 'Beszámítandó összeg',
            compensationInValue: 'Beszámított összeg',
            amount: 'Amount',
            payDate: 'Date of payment',
            quantity: 'Quantity',
            contractProduct: 'Product',
            depositSum: 'Deposit',
            sum: 'Amount',
            dueDate: 'Due date',
            parityPlace: 'Place of Parity',
            registryStatus: 'Type',
            incomingDate: 'Date of incoming',
            incomingSeller: 'Seller',
            vatNumber: 'Taxpayer ID',
            incomingModeOfArrival: 'Mode of arrival',
            incomingInvoiceNumber: 'Number of invoice',
            dateOfInvoice: 'Date of invoice',
            invoiceType: 'Type of invoice',
            relatedInvoiceNumber: 'Related invoice number',
            goodsSent: 'Date of fulfillment',
            lastDayOfPayment: 'Last day of payment',
            incomingPayMode: 'Pay mode',
            incomingBankAccountNumber: 'Bank account number',
            appliedRate: 'Applied rate',
            incomingBrutto: 'Gross value',
            incomingVAT: 'VAT value',
            incomingNetto: 'Net value',
            itemAmount: 'Amount',
            unit: 'Unit',
            pricePerUnit: 'Unit price',
            vatPercentSymbol: 'VAT %',
            postalAddressAddress: 'Postal address',
            postalZipCode: 'Postal zip code',
            postalCity: 'Postal city',
            postalZipCodeHU: 'Postal zip code',
            changeAllSelectedTickets: 'Change all selected tickets',
            depot: 'Depot',
            date: 'Date',
            reason: 'Reason',
            shipName: 'Name off ship',
            comment: 'Comment',
            unloadedWeight: 'Unloaded weight',
            loadedWeightKg: 'Loaded weight (kg)',
            value: 'Value',
            approved: 'Approved',
            forbidden: 'Forbidden',
            userName: 'User name',
            fullName: 'Full name',
            nickName: 'Nickname',
            phone: 'Phone number',
            type: 'Type',
            password: 'Password',
            passwordAgain: 'Password again',
            contractName: 'Name of contract',
            details: 'Details',
            invoiceEmail: 'E-invoice e-mail',
            mainPhone: 'Main phone number',
            mainEmail: 'Main e-mail',
            numberOfPackings: 'Number of packages',
            visible: 'Visible',
            hidden: 'Hidden',
            costBearerName: 'Name of cost bearer',
            costBearerType: 'Type of cost bearer',
            visibility: 'Visibility',
            cashAccounting: 'Cash Accounting',
            cashAccountingXs: 'Cash Accounting',
            kata: 'KATA',
            canAddToOrder: 'Can add to order',
            openStockValue: 'Value of stock',
            packetGoods: 'Packet goods',
            avgPrice: 'AveragePrice',
            county: 'County',
            felir: 'FELIR Number'
        },
        exception: {
            error: 'Hiba! <br/>{{ message }}',
            http: 'Kérés hiba: {{statusText}} <br/>{{config.url}}<br/>{{data.message}}',
            http404: 'Not found ...<br/>{{data.message}}',
            httpTimeout: 'A szerver nem válaszolt, kérem értesítse a fejlesztőt!',
            notFoundPdf: (options) => `This ${options.name} PDF is not existing.`,
            noData: 'No data to display!',
            ERROR_MONGOOSE_UNIQUE_INDEX: 'This data is not unique.',
        },

        question: {
            clone: 'Klónozhatok?',
            remove: 'Letörölhetem ezt az adatot?',
            modelNotSame: 'Az űrlap adatai változtak, ha folytatja, a módosítás elveszik.',
        },

        message: {
            ascending: 'Növekvő',
            descending: 'Csökkenő',
            clone: 'Klónoztam',
            noResult: 'Nincs találat',
            noPartnerBroker: (opts) => {
                return `There is no broker partner: '${opts.brokerName}'.`
            },
            noPartnerDealer: (opts) => {
                return `There is no dealer partner: '${opts.dealerName}'`
            },
            choose: 'Kérem válasszon',
            removed: 'Eltávolítva',
            removedFromForm: 'Eltávolítva a formból',
            undo: {
                form: 'Betölti az utolsó mentett adatot'
            },
            success: {
                save: 'Sikeres mentés.',
                load: 'Adat betöltve',
            },
            error: {
                removed: 'Ez adat le lett törölve, mostantól, nem menteni.',
                save: 'Nem sikerült a mentés.',
                load: 'Nem sikerült betölteni.',
                invalidDate: 'Hibás dátum',
            },
            popupBlock: 'Ha nem nyitja meg az oldalat, akkor a popup blokkolja, kérem kapcsolja be ezen a web oldalon.',
        },

        autocomplete: {
            plateNumber: 'Please, type a plate number!',
            tcn: "Please type an EKÁER number!",
            chooseDepot: 'Please type depot name!',
            chooseProduct: 'Please type a product!',
            choosePartner: 'Please type a partner!',
            code: 'Code',
            carrier: 'Please, type a carrier!',
            boniProduct: 'Please type a connected product!!'
        },
        pdf: {},

        tooltip: {
            addVehicles: 'Járművek hozzáadása',
            addDeposit: 'Előleg hozzáadása',
            showIncomingLists: 'Számlalisták mutatása',
            hideIncomingLists: 'Számlalisták elrejtése',
            showForm: 'Űrlap mutatása',
            hideForm: 'Űrlap elrejtése',
            newFiling: 'Új iktatás kezdése',
            visible: 'Látható',
            hidden: 'Rejtett',
            newServiceContract: 'Új szolgáltatási szerződés hozzáadása',
            newPartnerToolkit: 'Új partner eszközkészlet hozzáadása',
            addNewPrice: 'Új ár hozzáadása',
            cancel: 'Mégse',
            delete: 'Törlés',
            editLastDayOfPayment: 'Fizetési határidő módosítása',
            editDeadlineDate: 'Elszámolás dátumának módosítása',
            editFulfillmentDate: 'Teljesítés dátumának módosítása',
            orderNumber: 'Diszpozíció száma',
            loadLocation: 'Felrakóhely',
            unloadLocation: 'Lerakóhely',
            status: 'Állapot',
            contractVolume: 'Szerződött mennyiség',
            openedVolume: 'Nyitási mennyiség',
            openDay: 'Nyitás dátuma',
            productName: 'Termény',
            performed: 'Teljesített mennyiség',
            editLedgerHelper: 'Mozgásnem módosítása',
            editContractQuantity: 'Szerződött mennyiség módosítása',
            plannedVolume: "Planned volume",
            contractNumber: 'Contract number',
            number: 'Number',
            product: 'Product',
            invoiceWeight: 'Billable weight',
            nominationName: 'Name of nomination',
            plannedQuantity: 'Planned quantity',
            performedQuantity: 'Performed quantity',
            date: 'Dátum',
            cargoPlanName: 'Name of nomination',
            editPartner: 'Edit partner data',
            unitPrice: 'Price per unit',
            editUnitPrice: 'Modify price per unit',
            default: 'Default',
            makeOutTicket: 'Make out ticket',
            addNewPartner: 'Add new partner',
            ptAmount: 'Contract volume / Free volume / Disponable volume / Volume for possession transfer',
            productData: 'Products',
            partnerData: 'Partners',
            depotData: 'Depots',
            add: {
                partner: 'New partner',
                product: 'New product',
                depot: 'New depot'
            },
            wrongPartnerData: 'The partner has missing datas, please correct the following fields with the Edit partner data button:',
            orderAmount: 'Contract amount / Disponable amount'
        },

        button: {
            processing: 'Processing',
            retry: 'Újra',
            download: 'Letöltés',
            print: 'Nyomtatás',
            save: 'Mentés',
            preview: 'Preview',
            livePreviewHtml: 'Élő HTML',
            livePdf: 'Élő PDF',
            done: 'Kész',
            close: 'Bezár',
            pdf: 'PDF',
            pageBreak: 'Oldal törés',
            qrCode: 'QR Kód',
            show: 'Megnézem',
            refresh: 'Refresh',
            clear: 'Törlés',
            'default': 'Alap beállítás',
            clone: 'Klónozás',
            edit: 'Szerkesztés',
            cancel: "Mégse",
            lock: 'Zár',
            remove: 'Eltávolít',
            undo: 'Vissza',
            quit: 'Kilépés',
            vehicle: ' Jármű',
            uniqueVehicle: ' egyedi jármű sor',
            openOrder: 'Diszpozíció nyitása',
            editOrder: 'Diszpozíció szerkesztése',
            saveOrder: 'Mentés',
            closeOrder: 'Lezárás',
            deleteOrder: 'Törlés',
            reopenOrder: 'Újranyitás',
            editEkaer: 'EKÁER adatok szerkesztése',
            saveEkaer: 'EKÁER adatok mentése',
            ekaer: 'EKÁER műveletek',
            requestEkaer: ' EKÁER igénylése',
            finalizeEkaer: ' EKÁER lezárása',
            deleteEkaer: ' EKÁER törlése',
            modifyEkaer: ' EKÁER módosítása',
            generate: 'Készítése',
            generateDuplicate: 'Generate duplicate',
            deposit: 'Előleg',
            newNomination: 'Új nominálás hozzáadása',
            newNominationReplace: 'Új {type} hozzáadása',
            showWindow: 'Mutat',
            hide: 'Elrejt',
            newFiling: 'Új iktatás',
            newContract: 'Új szerződés',
            newPartnerToolkit: 'Új eszközkészlet',
            new: 'Új',
            addNewPrice: 'Új ár',
            savePrice: 'Ár mentése',
            page: 'Oldal',
            allPages: 'Minden oldal',
            showTicketsWithoutInvoice: 'Számlát váró mérlegjegyek mutatása',
            addNewPartner: 'Új partner rögzítése',
            addWeighingHouse: 'Új mérlegház hozzáadása',
            moveToRegistered: 'Move to reconcilation tab',
            moveToWaitForLogistic: 'Move to wait for logistic tab',
            addOrder: {
                sht: 'Új Sygnus hajórakodás tárházból',
                pht: 'Új Partner hajórakódás tárházból',
                pkb: 'Új Partner külső beszállítás'
            },
            nominationSummary: 'Nomination summary',
            nominationTicketList: 'Ticket list of nomination',
            orderTicketList: 'Ticket list of order',
            editPartner: 'Edit partner data',
            addMetaInput: 'Record new meta input',
            makeOutTicket: 'Make out ticket',
            addUser: 'Add new user',
            productData: 'Products',
            partnerData: 'Partners',
            depotData: 'Depots',
            addNew: {
                partner: 'Add new partner',
                product: 'Add new product',
                depot: 'Add new depot'
            },
        },

        fileName: {
            nominationSummary: '_Nomination_summary',
            nominationTicketList: '_Ticket_list_of_nomination',
            orderTicketList: '_Ticket_list_of_order'
        },

        title: {
            arabesqueUrl: 'Arabesque URL',
            arabesque: 'Arabesque',
            tcpAddress: 'TCP address',
            tcpPort: 'TCP port',
            pleasSelect: 'Please select',
            digiStore: 'Digi store 2.0',
            storage: 'Raktár',
            taxInspector: 'Adóhatósági ellenőrző adatszolgáltatás',
            taxInspectionList: 'Adóhatósági ellenőrző adatszolgáltatás',
            master: 'Törzsadatok',
            sort: 'Rendezés',
            created: 'Készült',
            updated: 'Módosítva',
            done: 'Kész',
            'new': 'Új',
            editor: 'Szerkesztő',
            preview: 'Előnézet',
            html: 'HTML',
            code: 'Kód',
            schema: 'Típus',
            insert: 'Beszúrás',
            settings: 'Beállítások',
            common: 'Közös',
            search: 'Kereső',
            perPage: 'Per/oldal',
            total: 'Összes',
            pages: 'Oldalok',
            page: 'Oldal',
            all: 'Mind',
            lists: 'Listák',
            pieces: 'db.',
            socketLock: 'Zárolt elemek listája',
            activeUsers: 'Aktív felhasználók',
            invoiceLists: 'Számlalisták',
            portLists: 'Kikötő listák',
            filing: 'Iktatás',
            reconcilation: 'Számlaegyeztetés',
            serviceContractList: 'Szolgáltatási szerződések',
            newContract: 'Új szerződés',
            review: 'Áttekintő',
            partnerToolkitsList: 'Partner eszközkészletek',
            newPartnerToolkit: 'Új eszközkészlet',
            purchasePrices: 'Referencia árak (EUR)',
            language: 'Nyelv',
            label: 'Címke',
            deliveryCertificate: 'Felvásárlási jegy',
            addNewPartner: 'Új partner rögzítése',
            weighingHouses: 'Mérlegházak',
            winner: 'WinNER',
            invoiceStatement: 'Invoice Statement',
            editUnitPrice: 'Modify price per unit',
        },

        tab: {
            dispos: 'Diszpozíciók'
        },

        mongoose: {
            unique: `Ilyen érték már van, csak egyszer lehet, mert a '{PATH}' mező értéke '{VALUE}' egyedi`
        },

        schema: {
            Contract: 'Szerződés',
            ServiceContract: 'Szolgáltatási szerződés',
            Order: 'Rendelés',
            OutgoingInvoice: 'Kimenő számla',
            DeliveryCertificate: 'Felvásárlási jegy',
            Ticket: 'Mérlegjegy',
            ShipPaper: 'Hajó összesítő',
            IncomingInvoice: 'Incoming invoice',
            OtherDocument: 'Other document',
            Partner: 'Partner',
            Site: 'Site',

        },

        ticketType: 'Jegy típusa',
        ticketTypes: {
            scale: 'mérleg',
            possessionTransfer: 'birtokátruházó',
            ruralTour: 'vidéki túra'
        },
        registryStatusList: {
            advancement: 'Előleg',
            other: 'Egyéb',
            ware: 'Áru',
            service: 'Szolgáltatás'
        },
        incomingTypesList: {
            electronic: 'Elektronikus',
            manual: 'Kézben',
            postal: 'Posta'
        },
        paymodeList: {
            'creditcard': 'Hitelkártya',
            'transfer_in_advance': 'Előre utalás',
            'compensation': 'Kompenzálás',
            'cash': 'Készpénz',
            'cod': 'Utánvétel',
            'transfer': 'Átutalás'
        },
        invoiceType: {
            'normal': 'Normál',
            'storno': 'Sztornó',
            'correction': 'Korrekciós'
        },
        origType: {
            'product': 'Product',
            'general': 'General',
            'service': 'Service'
        },
        outgoingInvoiceType: {
            'product': 'Product',
            'general': 'General',
            'service': 'Service',
            'correction': 'Correction',
            'storno': 'Strono'
        },
        serviceType: { //szolgáltatás típus
            'bagFilling': 'bagFilling',
            'depotLoading': 'depotLoading',
            'shipLoading': 'shipLoading',
            'shipUnloading': 'shipUnloading',
            'truckLoading': 'truckLoading'
        },

        nominationType: {
            'shipOn': 'Hajó berakodás',
            'truck': 'Közúti teljesítés',
            'shipFrom': 'Hajó kirakodás',
        },

        transportType: {
            'shipOn': 'shipOn',
            'truck': 'truck',
            'shipFrom': 'shipFrom',
        },

        contractNumber: 'Szerződés szám',
        name: 'Név',
        parity: 'Paritás',
        price: 'Ár',
        ticketCount: 'Mérlegjegyek száma',
        weightCount: 'Mérlegjegyek összesített súlya',
        contractPrice: 'Szerződéses ár',
        ticketName: 'Jegy',
        loadedWeight: 'Felrakott súly',
        plateNumber: 'Rendszám',
        unloadedWeight: 'Lerakott súly',
        contractParity: 'Szerződés paritás',
        orderNumber: 'Rendelésszám',
        loadLocation: 'Felrakóhely',
        unloadLocation: 'Lerakóhely',
        wayBill: 'Szállítólevél',
        notSelected: 'Nincs',
        stockValue: 'Készletérték',
        none: 'Nincs',
        fulfillmentDate: 'Teljesítés dátuma',
        modifiedPrice: 'Módosított egységár',
        possessionTransfer: 'Possession transfer',
        firstFulfillmentDate: 'Fulfillment date of the first load',
        lastTicketDate: 'Date of last measure',

        user: {
            role: {
                taxInspector: "NAV Ellenörző",
                adminGlobal: "Admin global",
                adminLogistic: "Admin logisztikus",
                logistic: "Logisztikus",
                traderLeader: "Vezető kereskedő",
                trader: "Kereskedő",
                leader: "Vezető",
                harbourMaster: "Kikötőmester",
                hedger: "Hedger",
                libra: "Mérleg",
                registry: "Iktató",
                accounting: 'Könyvelés',
                site: 'Site',
                libraAdmin: "Libra Admin" // mérlegelni tud, és ekaert is kezelhet
            }
        },
        inputSwitch: {
            'searchMode': {
                caption: 'Search mode',
                anywhere: 'Anywhere',
                startsWith: 'Starts with',
            },
            'default': {
                on: 'igen',
                off: "nem",
            }
        },
        clipboard: {
            cutSuccessful: "Adat a vágólapra áthelyezve!",
            cutFailed: "Sikertelen kivágás!",
            cutToClipboard: "Kivágás",
            pasteFromClipboard: "Beillesztés",
            copyToClipboard: "Másolás",
            copySuccesful: "Adat a vágólapra másolva!",
            copyFailed: "Sikertelen másolás!"

        },
        amountUnits: [
            'mt',
            'kg',
            'db'
        ],
        loanLeasing: {
            LoansLeasings: "Hitelek/lízingek",
            currency: "Pénznem",
            monthlyInstallment: "Havi törlesztőrészlet",
            bank: "Bank",
            expires: "Lejárat",
            dueDay: "Fizetési fordulónap",
            residualDebt: "Lejáratig fennálló tartozás",
            loanAmount: "Hitelösszeg"

        },
        depots: {
            title: 'Raktár',
            addButton: 'Új raktár hozzáadása',
            cancelButton: 'Bezár',
            cancelButtonTooltip: 'Bezárás mentés nélkül'
        },
        sites: {
            title: 'Telephelyek',
            addButton: 'Új telephely hozzáadása',
            cancelButton: 'Mégse',
            taxNumber: 'Adószám',
            phone: 'Telefon',
            email: 'E-mail',
            country: 'Ország',
            city: 'Város',
            zipCode: 'Irányítószám',
            street: 'Közterület neve',
            streetType: 'Közterület jellege',
            streetNumber: 'Házszám',
            lotNumber: 'Helyrajzi szám',
            latitude: 'Gps-szélesség',
            longitude: 'Gps-hosszúság',
            visible: 'Láthatóság',
            own: 'Saját',
            privat: 'Privát',
            ownScale: 'Saját mérleg',
            comment: 'Megjegyzés'
        },
        fizmodSchema: {
            enum: {
                fizmod_nev: [
                    {value: 'Hitelkártya', message: 'Credit-card'},
                    {value: 'Előre utalás', message: 'Transfer in advance'},
                    {value: 'Utánvétel', message: 'Cash on delivery'},
                    {value: 'Készpénz', message: 'Cash'},
                    {value: 'Kompenzálás', message: 'Compensation'},
                    {value: 'Átutalás', message: 'Transfer'}
                ]
            }
        },
        invoiceStatementTabs: [
            'Outgoing Invoices',
            'Incoming Invoices',
            'Delivery Certificates',
            'Statistics'
        ],
        excel: {
            contractList: {
                columns: [
                    'contractNumber',
                    'partnerContractNumber',
                    'partnerName',
                    'partnerContractVatNumber',
                    'termFrom',
                    'termTo',
                    'contractDate',
                    'sustainability',
                    'ownerName',
                    'brokerName',
                    'productName',
                    'quantity',
                    'remain',
                    'freeQuantity',
                    'performedQuantity',
                    'price',
                    'currency',
                    'valueInContractCurrency',
                    'valueInHuf',
                    'paymentDeadline',
                    'parityName',
                    'fixedParityPlace',
                    'contractFixingDate',
                    'status',
                    'statusClosed'
                ],
                headers: [
                    'Szerződésszám',
                    'Partner szerződésszám',
                    'Szerződött partner',
                    'Partner adószáma',
                    'Szállítás kezdete',
                    'Szállítás vége',
                    'Megegyezés dátuma',
                    'Fenntarthatóság',
                    'Felelős',
                    'Ügynök',
                    'Áru',
                    'Eredeti szerződött mennyiség',
                    'Hátralévő mennyiség',
                    'Diszponálható mennyiség',
                    'Teljesített mennyiség',
                    'Nettó egységár',
                    'Devizanem',
                    'Szerződés értéke', //eredeti mennyiség * egységár
                    'Szerződés értéke (HUF)', //szerződés értéke * árfolyam
                    'Fizetési kondíció',
                    'Paritás',
                    'Paritás helye',
                    'Rögzítés dátuma',
                    'Kiküldöttség - Aláírottság', //kiküldöttség, aláírottság
                    'Nyitott / Zárt',
                ]
            },
            stockLog: {
                headers: [
                    'Ticket name',
                    'Direction',
                    'Date',
                    'Product',
                    'Depot',
                    'Site',
                    'Loaded weight',
                    'Unloaded weight',
                    'Order Number',
                    'Tara weight',
                    'Tara date',
                    'Gross weight',
                    'Gross date',
                    'Number of packings',
                    'Vehicle',
                    'Tow',
                    'Nomination',
                    'Ship',
                    'Contract number',
                    'Invoice number',
                    'Accounting ID',
                    'Partner',
                    'Own',
                    'EKÁER',
                    'Recorded by',

                ],
                columns: [
                    'subTicketName',
                    'direction',
                    'date',
                    'productName',
                    'depotName',
                    'siteName',
                    'loadedWeight',
                    'unloadedWeight',
                    'orderNumber',
                    'taraWeight',
                    'taraDate',
                    'bruttoWeight',
                    'bruttoDate',
                    'numberOfPackings',
                    'plateNumber1',
                    'plateNumber2',
                    'cargoPlanName',
                    'shipName',
                    'contractNumber',
                    'invoiceNumber',
                    'accountingId',
                    'partner',
                    'sygnus',
                    'tcn',
                    'userFullName',
                ]
            }
        },

        otherDocuments: {
            title: {
                title: 'Other documents',
                template: 'Templates',
                instance: 'Documents',
                validations: 'Validations / Rules',
                type: 'Type',
                field: 'New field',
                label: 'Label',
                id: 'ID',
                defaultListField: 'The default display field',
                displayInList: 'Display in list',
                requiredField: {
                    'true': 'Required field',
                    'false': 'Not required field',
                },
                types: {
                    'select': 'select',
                    'text': 'text',
                    'date': 'date',
                    'number': 'number',
                    'textarea': 'textarea',
                    'integer': 'integer',
                    'mask': 'mask',
                    'related': 'Related document',
                }
            },

            add: {
                template: 'New other document template',
                document: 'New other document',
            },

            confirm: {
                deleteTemplateField: 'Can I delete this template field?',
                deleteOtherDocumentTemplate: 'Can I delete this other document template?',
                deleteOtherDocument: 'Can I delete this other document?',
            },

            label: {
                required: 'Required',
                notRequired: 'Not required',
                type: 'Type',
                label: 'Label',
                validation: 'Validation / Rule',
                action: 'Action',
                noValidationRule: 'No validation rule set',
                maskFormat: 'Mask rule',
                maskFormatValidationError: 'Mask rule validation error',
                selectOption: 'Option',
                newOption: 'New option',
                deleteOptions: 'Delete option',
                dateTime: 'Date time',
            },
            form: {
                template: {
                    'new': ' Create a new other document template',
                    edit: ' Edit an other document template',
                },
                field: {
                    'new': ' New meta field',
                    edit: ' Edit meta field',
                },
                doc: {
                    'new': ' Create a new other document',
                    edit: ' Edit an other document',
                },
            },
            fieldTable: {
                empty: 'No meta fields recorded.',
            },
            validations: {
                'all-required': 'Required',
                'date-with-time': 'Date with time',
                'mask-format': 'The mask format',
                'number-integer': 'Integer only',

            }

        },
        contractDetails: {
            label: {
                partnerAgain: 'Please, choose partner, again.',
            },
        },
        headers: {
            expiry: 'Expiry',
            contractNumber: 'Number of contract',
            rate: 'Rate',
            notHedged: 'No hedge',
            partFull: 'Part/Full',
            total: 'Total'
        },
        additionalInfo: {
            performsToPossessionTransfer: 'possession transfer'
        },
        owner: [
            {value: 'sygnus', name: 'Adony'},
            {value: 'notSygnus', name: 'Not Adony'},
            {value: 'all', name: 'All'},
        ],
        contractStatuses: [
            {value: 'open', name: 'Open'},
            {value: 'closed', name: 'Closed'},
            {value: 'pTransferred', name: 'Possession transferred'}
        ]
    };

    ngivrStrings.input = {};

    ngivrStrings.autocomplete.otherDocumentTemplate = {
        placeholder: 'You may choose an other document template type',
        label: 'Other document template',
    };

    if (isModule) {

        ngivrStrings.htmlTemplate = require('./strings/html-template');
        ngivrStrings.financialDocument = require('./strings/financial-document');
        ngivrStrings.autocomplete.partner =  require('./strings/input/autocomplete/partner');

        module.exports = ngivrStrings;
    } else if (isWindow) {
        ngivr.translate.en = ngivrStrings;
    }
})();
